name: Building App

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Prebuild Checks
    runs-on: ubuntu-latest
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: returntocorp/semgrep
    steps:
    - uses: actions/checkout@v4
    - run: semgrep ci
    - name: Set up Go 
      uses: actions/setup-go@v5.2.0
      with: 
        go-version: ${{ vars.GOVERSION }}
    - name: Golangci-lint
        # You may pin to the exact commit or the version.
        # uses: golangci/golangci-lint-action@a4f60bb28d35aeee14e6880718e0c85ff1882e64
      uses: golangci/golangci-lint-action@v6.0.1
        #with:
          # The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
      
          #version: # optional
          # The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          #install-mode: # optional, default is binary
          # golangci-lint working directory, default is project root
          #working-directory: # optional
          # the token is used for fetching patch of a pull request to show only new issues
          #github-token: # optional, default is ${{ github.token }}
          # if set to true and the action runs on a pull request - the action outputs only newly found issues
          #only-new-issues: # optional, default is false
          # if set to true then the all caching functionality will be complete disabled, takes precedence over all other caching options.
      
          #skip-cache: # optional, default is false
          # if set to true then the action will not save any caches, but it may still restore existing caches, subject to other options.
      
          #skip-save-cache: # optional, default is false
          # Force the usage of the embedded problem matchers
          #problem-matchers: # optional, default is false
          # golangci-lint command line arguments
          #args: # optional, default is 
          # Periodically invalidate a cache because a new code being added. (number of days)
          #cache-invalidation-interval: # optional, default is 7
  build:
    needs: test
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4
      - name: Set up Go 
        uses: actions/setup-go@v5.2.0
        with: 
          go-version: ${{ vars.GOVERSION }}
      #cross compiling: go tool dist list
      - name: Build Go Binary 
        run: |
          GOOS=windows GOARCH=amd64 go build -o bin/mondoowebapp-amd64-windows.exe main.go
          GOOS=windows GOARCH=arm64 go build -o bin/mondoowebapp-arm64-windows.exe main.go
          GOOS=darwin GOARCH=amd64 go build -o bin/mondoowebapp-amd64-darwin main.go
          GOOS=darwin GOARCH=arm64 go build -o bin/mondoowebapp-arm64-darwin main.go
          GOOS=linux GOARCH=amd64 go build -o bin/mondoowebapp-amd64-linux main.go
          GOOS=linux GOARCH=arm64 go build -o bin/mondoowebapp-arm64-linux main.go
      - name: Upload Build Artifact 
        uses: actions/upload-artifact@v4.6.0
        with: 
            name: mondoowebapp 
            path: bin/